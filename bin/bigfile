#!/usr/bin/env node
require('colors')

var program = require('commander'),
    Graph = require('SourceGraph'),
    Build = require('../src/index.js'),
    path = require('path'),
    fs = require('fs'),
    uglify = require('uglify-js'),
    all = require('promises').all,
    cwd = process.cwd(),
    Handlebars = require('handlebars').precompile

program.version('0.0.1')
    .usage('[options]')
    .option('-e, --entry [path]', 'Path to the head of your code', './src/index.js')
    .option('-w, --write [path]', 'Path to your built code', './dist/index.js')
    .option('-x, --export [name]', 'Global variable for your package')
    .option('-b, --beautify', 'Format to idiomatic JS')
    .option('-c, --compress', 'Minify the loader script')
    .option('-l, --leave-ast', 'Leave ast alone')
    .option('-L, --leave-code', 'Leave code as is')
    .option('-p, --production', 'Remove all paths in favour of indexs')
    .parse(process.argv)

var entry = path.resolve(cwd, program.entry)
var output = path.resolve(cwd, program.write);

process.stdout.write(('Tracking files from: '+entry+'\n').green)

var graph = new Graph(entry)
var build = new Build(graph)
    .entry(entry)
    .minify(program.leaveCode 
        ? false
        : {
            beautify: program.beautify || false,
            compress: program.compress || false,
            leaveAst: program.leaveAst || false
        }
    )
    .handle(/\.js$/, function (file) {return file})
    .handle(/\/components\/\w+$/, function (file) {return file})
    .handle(/\/package\.json$/, function (file) {
        var data = JSON.parse(file.text), 
            main = data.main
        if (main) {
            if (main[0].match(/\w/)) main = './'+main
        }
        else {
            throw new Error('No main!')
            // main = data.directories
        }
        file.text = 'module.exports = require("'+main+'")'
        return file
    })
    .handle(/component\.json/, function (file) {
        var data = JSON.parse(file.text), 
            main = data.main
        if (!main) {
            for ( var i = data.scripts.length; i-- ; ) {
                if (data.scripts[i].match(/index\.js$/)) main = data.scripts[i]
            }
        }
        if (main) {
            if (main[0].match(/\w/)) main = './'+main
        }
        file.text = 'module.exports = require("'+main+'")'
        return file
    })
    .handle(/\.json$/, function (file) {
        file.text = 'module.exports = '+file.text
        return file
    })
    .handle(/\.css$/, function (file) {
        file.text = 'var style = document.createElement(\'style\'), count = 0\n'
            + 'style.appendChild(document.createTextNode('+JSON.stringify(file.text)+'))\n'
            + 'exports.install = function () {\n'
            + '  if (++count === 1) document.getElementsByTagName(\'head\')[0].appendChild(style)\n'
            + '}\n'
            + 'exports.remove = function () {\n'
            + '  count = Math.max(0, --count)\n'
            + '  if (count === 0) document.getElementsByTagName(\'head\')[0].removeChild(style)\n'
            + '}\n'
        return file
    })
    .handle(/\.hbs$/, function(file) {
        var out = 'var Handlebars = require(\'handlebars-runtime\')'
            + '\nmodule.exports = Handlebars.template('+Handlebars(file.text)+')'
        file.text = out.replace(
            /\s*helpers = helpers \|\| Handlebars\.helpers;\s*/,
            '\nhelpers || (helpers = Handlebars.helpers);\n'
        )
        return file
    })

if (program.export) build.export(program.export)
if (program.production) build.debug(false)

build.render(function (out) {
    process.stdout.write('Done: '.green.bold)
    output && fs.writeFile(output, out, 'utf-8', function (err) {
        process.stdout.write(err 
            ? ('but unable to write the file.' + err).red
            : ('output written to ' + output).green
        )
        if (program.export) {
            process.stdout.write('\nModule exporting as: '.blue)
            process.stdout.write(program.export.blue.bold)
        }
        process.stdout.write('\n')
        process.exit()
    })
})